
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  passwordHash: 'passwordHash',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  profileImage: 'profileImage',
  musicPreferences: 'musicPreferences',
  venuePreferences: 'venuePreferences',
  goingOutFrequency: 'goingOutFrequency',
  location: 'location',
  phoneNumber: 'phoneNumber',
  isEmailVerified: 'isEmailVerified',
  role: 'role',
  venueIds: 'venueIds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastActiveAt: 'lastActiveAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.VenueScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  location: 'location',
  latitude: 'latitude',
  longitude: 'longitude',
  capacity: 'capacity',
  currentOccupancy: 'currentOccupancy',
  rating: 'rating',
  priceRange: 'priceRange',
  pricing: 'pricing',
  musicGenres: 'musicGenres',
  openingHours: 'openingHours',
  features: 'features',
  bookingURL: 'bookingURL',
  phoneNumber: 'phoneNumber',
  images: 'images',
  placeId: 'placeId',
  businessStatus: 'businessStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusySnapshotScalarFieldEnum = {
  id: 'id',
  venueId: 'venueId',
  timestamp: 'timestamp',
  occupancyCount: 'occupancyCount',
  occupancyPercentage: 'occupancyPercentage',
  status: 'status',
  source: 'source'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  venueId: 'venueId',
  authorId: 'authorId',
  content: 'content',
  imageUrl: 'imageUrl',
  tags: 'tags',
  likes: 'likes',
  comments: 'comments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DealScalarFieldEnum = {
  id: 'id',
  venueId: 'venueId',
  createdById: 'createdById',
  title: 'title',
  description: 'description',
  discountPercentage: 'discountPercentage',
  validFrom: 'validFrom',
  validUntil: 'validUntil',
  termsAndConditions: 'termsAndConditions',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  venueId: 'venueId',
  createdById: 'createdById',
  title: 'title',
  description: 'description',
  startTime: 'startTime',
  endTime: 'endTime',
  ticketPrice: 'ticketPrice',
  capacity: 'capacity',
  eventType: 'eventType',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StoryScalarFieldEnum = {
  id: 'id',
  venueId: 'venueId',
  authorId: 'authorId',
  mediaUrl: 'mediaUrl',
  mediaType: 'mediaType',
  caption: 'caption',
  views: 'views',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  metadata: 'metadata',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.VenueImageScalarFieldEnum = {
  id: 'id',
  venueId: 'venueId',
  imageType: 'imageType',
  url: 'url',
  thumbnailUrl: 'thumbnailUrl',
  altText: 'altText',
  caption: 'caption',
  uploadedBy: 'uploadedBy',
  uploadedAt: 'uploadedAt',
  isActive: 'isActive',
  displayOrder: 'displayOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  width: 'width',
  height: 'height',
  fileSize: 'fileSize',
  format: 'format',
  colorPalette: 'colorPalette',
  isPortrait: 'isPortrait',
  aspectRatio: 'aspectRatio'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  NON_BINARY: 'NON_BINARY',
  PREFER_NOT_TO_SAY: 'PREFER_NOT_TO_SAY'
};

exports.GoingOutFrequency = exports.$Enums.GoingOutFrequency = {
  RARELY: 'RARELY',
  OCCASIONALLY: 'OCCASIONALLY',
  REGULARLY: 'REGULARLY',
  FREQUENTLY: 'FREQUENTLY'
};

exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  VENUE_MANAGER: 'VENUE_MANAGER',
  ADMIN: 'ADMIN'
};

exports.BusyStatus = exports.$Enums.BusyStatus = {
  QUIET: 'QUIET',
  MODERATE: 'MODERATE',
  BUSY: 'BUSY',
  VERY_BUSY: 'VERY_BUSY',
  CLOSED: 'CLOSED'
};

exports.MediaType = exports.$Enums.MediaType = {
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO'
};

exports.VenueImageType = exports.$Enums.VenueImageType = {
  ICON: 'ICON',
  BANNER: 'BANNER',
  GALLERY: 'GALLERY',
  MENU: 'MENU',
  INTERIOR: 'INTERIOR',
  EXTERIOR: 'EXTERIOR',
  FOOD: 'FOOD',
  DRINKS: 'DRINKS',
  ATMOSPHERE: 'ATMOSPHERE',
  EVENTS: 'EVENTS'
};

exports.Prisma.ModelName = {
  User: 'User',
  RefreshToken: 'RefreshToken',
  Venue: 'Venue',
  BusySnapshot: 'BusySnapshot',
  Post: 'Post',
  Deal: 'Deal',
  Event: 'Event',
  Story: 'Story',
  AuditLog: 'AuditLog',
  VenueImage: 'VenueImage'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/joshtewksbury/Desktop/FINAL/VibeBackend/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/joshtewksbury/Desktop/FINAL/VibeBackend/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id                String            @id @default(cuid())\n  email             String            @unique\n  firstName         String\n  lastName          String\n  passwordHash      String\n  dateOfBirth       DateTime?\n  gender            Gender            @default(PREFER_NOT_TO_SAY)\n  profileImage      String?\n  musicPreferences  String[]\n  venuePreferences  String[]\n  goingOutFrequency GoingOutFrequency @default(OCCASIONALLY)\n  location          String?\n  phoneNumber       String?\n  isEmailVerified   Boolean           @default(false)\n  role              UserRole          @default(USER)\n  venueIds          String[] // For venue managers\n  createdAt         DateTime          @default(now())\n  updatedAt         DateTime          @updatedAt\n  lastActiveAt      DateTime          @default(now())\n\n  // Relations\n  posts         Post[]\n  deals         Deal[]\n  events        Event[]\n  refreshTokens RefreshToken[]\n\n  @@map(\"users\")\n}\n\nmodel RefreshToken {\n  id        String   @id @default(cuid())\n  token     String   @unique\n  userId    String\n  expiresAt DateTime\n  createdAt DateTime @default(now())\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"refresh_tokens\")\n}\n\nmodel Venue {\n  id               String   @id @default(cuid())\n  name             String\n  category         String\n  location         String\n  latitude         Float\n  longitude        Float\n  capacity         Int\n  currentOccupancy Int      @default(0)\n  rating           Float?\n  priceRange       String\n  pricing          Json? // Flexible pricing object\n  musicGenres      Json[] // Array of music genre objects\n  openingHours     Json // Opening hours object\n  features         Json[] // Array of feature objects\n  bookingURL       String?\n  phoneNumber      String?\n  images           String[]\n  placeId          String? // Google Places ID\n  businessStatus   String?\n  createdAt        DateTime @default(now())\n  updatedAt        DateTime @updatedAt\n\n  // Relations\n  busySnapshots BusySnapshot[]\n  posts         Post[]\n  deals         Deal[]\n  events        Event[]\n  stories       Story[]\n  venueImages   VenueImage[]\n\n  @@map(\"venues\")\n}\n\nmodel BusySnapshot {\n  id                  String     @id @default(cuid())\n  venueId             String\n  timestamp           DateTime   @default(now())\n  occupancyCount      Int\n  occupancyPercentage Int\n  status              BusyStatus\n  source              String     @default(\"realtime\") // \"realtime\", \"serp\", \"google\", \"estimated\"\n\n  venue Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)\n\n  @@index([venueId, timestamp])\n  @@map(\"busy_snapshots\")\n}\n\nmodel Post {\n  id        String   @id @default(cuid())\n  venueId   String\n  authorId  String\n  content   String\n  imageUrl  String?\n  tags      String[]\n  likes     Int      @default(0)\n  comments  Int      @default(0)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  venue  Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)\n  author User  @relation(fields: [authorId], references: [id], onDelete: Cascade)\n\n  @@map(\"posts\")\n}\n\nmodel Deal {\n  id                 String   @id @default(cuid())\n  venueId            String\n  createdById        String\n  title              String\n  description        String\n  discountPercentage Int?\n  validFrom          DateTime\n  validUntil         DateTime\n  termsAndConditions String?\n  isActive           Boolean  @default(true)\n  createdAt          DateTime @default(now())\n  updatedAt          DateTime @updatedAt\n\n  venue     Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)\n  createdBy User  @relation(fields: [createdById], references: [id], onDelete: Cascade)\n\n  @@map(\"deals\")\n}\n\nmodel Event {\n  id          String   @id @default(cuid())\n  venueId     String\n  createdById String\n  title       String\n  description String\n  startTime   DateTime\n  endTime     DateTime\n  ticketPrice Float?\n  capacity    Int?\n  eventType   String\n  imageUrl    String?\n  isActive    Boolean  @default(true)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  venue     Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)\n  createdBy User  @relation(fields: [createdById], references: [id], onDelete: Cascade)\n\n  @@map(\"events\")\n}\n\nmodel Story {\n  id        String    @id @default(cuid())\n  venueId   String\n  authorId  String? // Nullable for venue-posted stories\n  mediaUrl  String\n  mediaType MediaType\n  caption   String?\n  views     Int       @default(0)\n  expiresAt DateTime\n  createdAt DateTime  @default(now())\n\n  venue Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)\n\n  @@map(\"stories\")\n}\n\nmodel AuditLog {\n  id         String   @id @default(cuid())\n  userId     String?\n  action     String\n  resource   String\n  resourceId String?\n  metadata   Json?\n  ipAddress  String?\n  userAgent  String?\n  createdAt  DateTime @default(now())\n\n  @@map(\"audit_logs\")\n}\n\nmodel VenueImage {\n  id           String         @id @default(cuid())\n  venueId      String\n  imageType    VenueImageType\n  url          String\n  thumbnailUrl String?\n  altText      String?\n  caption      String?\n  uploadedBy   String?\n  uploadedAt   DateTime       @default(now())\n  isActive     Boolean        @default(true)\n  displayOrder Int            @default(0)\n  createdAt    DateTime       @default(now())\n  updatedAt    DateTime       @updatedAt\n\n  // Image metadata\n  width        Int?\n  height       Int?\n  fileSize     Int?\n  format       String?\n  colorPalette String[] // Array of hex color codes\n  isPortrait   Boolean?\n  aspectRatio  Float?\n\n  venue Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)\n\n  @@index([venueId])\n  @@index([imageType])\n  @@index([isActive])\n  @@index([venueId, imageType, isActive])\n  @@map(\"venue_images\")\n}\n\n// Enums\nenum Gender {\n  MALE\n  FEMALE\n  NON_BINARY\n  PREFER_NOT_TO_SAY\n}\n\nenum GoingOutFrequency {\n  RARELY\n  OCCASIONALLY\n  REGULARLY\n  FREQUENTLY\n}\n\nenum UserRole {\n  USER\n  VENUE_MANAGER\n  ADMIN\n}\n\nenum BusyStatus {\n  QUIET\n  MODERATE\n  BUSY\n  VERY_BUSY\n  CLOSED\n}\n\nenum MediaType {\n  IMAGE\n  VIDEO\n}\n\nenum VenueImageType {\n  ICON\n  BANNER\n  GALLERY\n  MENU\n  INTERIOR\n  EXTERIOR\n  FOOD\n  DRINKS\n  ATMOSPHERE\n  EVENTS\n}\n",
  "inlineSchemaHash": "66581be197030b71ac0ef1d4bb9b95a3902c31b4fb9e3c996f2960eef1ec9c25",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dateOfBirth\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"gender\",\"kind\":\"enum\",\"type\":\"Gender\"},{\"name\":\"profileImage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"musicPreferences\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"venuePreferences\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"goingOutFrequency\",\"kind\":\"enum\",\"type\":\"GoingOutFrequency\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phoneNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isEmailVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"venueIds\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastActiveAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"posts\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"PostToUser\"},{\"name\":\"deals\",\"kind\":\"object\",\"type\":\"Deal\",\"relationName\":\"DealToUser\"},{\"name\":\"events\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventToUser\"},{\"name\":\"refreshTokens\",\"kind\":\"object\",\"type\":\"RefreshToken\",\"relationName\":\"RefreshTokenToUser\"}],\"dbName\":\"users\"},\"RefreshToken\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"RefreshTokenToUser\"}],\"dbName\":\"refresh_tokens\"},\"Venue\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"latitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"longitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"capacity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"currentOccupancy\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"priceRange\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pricing\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"musicGenres\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"openingHours\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"features\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"bookingURL\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phoneNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"images\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"placeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"businessStatus\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"busySnapshots\",\"kind\":\"object\",\"type\":\"BusySnapshot\",\"relationName\":\"BusySnapshotToVenue\"},{\"name\":\"posts\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"PostToVenue\"},{\"name\":\"deals\",\"kind\":\"object\",\"type\":\"Deal\",\"relationName\":\"DealToVenue\"},{\"name\":\"events\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventToVenue\"},{\"name\":\"stories\",\"kind\":\"object\",\"type\":\"Story\",\"relationName\":\"StoryToVenue\"},{\"name\":\"venueImages\",\"kind\":\"object\",\"type\":\"VenueImage\",\"relationName\":\"VenueToVenueImage\"}],\"dbName\":\"venues\"},\"BusySnapshot\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"venueId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"occupancyCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"occupancyPercentage\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"BusyStatus\"},{\"name\":\"source\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"venue\",\"kind\":\"object\",\"type\":\"Venue\",\"relationName\":\"BusySnapshotToVenue\"}],\"dbName\":\"busy_snapshots\"},\"Post\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"venueId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"likes\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"comments\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"venue\",\"kind\":\"object\",\"type\":\"Venue\",\"relationName\":\"PostToVenue\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PostToUser\"}],\"dbName\":\"posts\"},\"Deal\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"venueId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdById\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"discountPercentage\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"validFrom\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"validUntil\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"termsAndConditions\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"venue\",\"kind\":\"object\",\"type\":\"Venue\",\"relationName\":\"DealToVenue\"},{\"name\":\"createdBy\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"DealToUser\"}],\"dbName\":\"deals\"},\"Event\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"venueId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdById\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"ticketPrice\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"capacity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"eventType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"venue\",\"kind\":\"object\",\"type\":\"Venue\",\"relationName\":\"EventToVenue\"},{\"name\":\"createdBy\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"EventToUser\"}],\"dbName\":\"events\"},\"Story\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"venueId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mediaUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mediaType\",\"kind\":\"enum\",\"type\":\"MediaType\"},{\"name\":\"caption\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"views\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"venue\",\"kind\":\"object\",\"type\":\"Venue\",\"relationName\":\"StoryToVenue\"}],\"dbName\":\"stories\"},\"AuditLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"resource\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"resourceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAgent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"audit_logs\"},\"VenueImage\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"venueId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageType\",\"kind\":\"enum\",\"type\":\"VenueImageType\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"thumbnailUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"altText\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"caption\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"uploadedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"uploadedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"displayOrder\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"width\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"height\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"fileSize\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"format\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"colorPalette\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isPortrait\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"aspectRatio\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"venue\",\"kind\":\"object\",\"type\":\"Venue\",\"relationName\":\"VenueToVenueImage\"}],\"dbName\":\"venue_images\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

