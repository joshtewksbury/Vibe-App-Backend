// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  firstName        String
  lastName         String
  passwordHash     String
  dateOfBirth      DateTime?
  gender           Gender    @default(PREFER_NOT_TO_SAY)
  profileImage     String?
  musicPreferences String[]
  venuePreferences String[]
  goingOutFrequency GoingOutFrequency @default(OCCASIONALLY)
  location         String?
  phoneNumber      String?
  isEmailVerified  Boolean   @default(false)
  role             UserRole  @default(USER)
  venueIds         String[]  // For venue managers
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastActiveAt     DateTime  @default(now())

  // Relations
  posts            Post[]
  deals            Deal[]
  events           Event[]
  refreshTokens    RefreshToken[]

  // Friendship relations
  friendshipsInitiated Friendship[] @relation("FriendshipInitiator")
  friendshipsReceived  Friendship[] @relation("FriendshipReceiver")

  // Messaging relations
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  conversationParticipants ConversationParticipant[]

  // Encryption keys for E2EE messaging
  publicKey        String?
  encryptedPrivateKey String?
  keyCreatedAt     DateTime?

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Venue {
  id               String           @id @default(cuid())
  name             String
  category         String
  location         String
  latitude         Float
  longitude        Float
  capacity         Int
  currentOccupancy Int              @default(0)
  rating           Float?
  priceRange       String
  pricing          Json?            // Flexible pricing object
  musicGenres      Json[]           // Array of music genre objects
  openingHours     Json             // Opening hours object
  features         Json[]           // Array of feature objects
  bookingURL       String?
  phoneNumber      String?
  images           String[]
  venueIcon        String?          // Base64 venue icon (deprecated, use venueIconUrl)
  venueIconUrl     String?          // Cloudinary URL for venue icon
  genderSplit      Json?            @map("gender_split") // Gender demographics {male: Int, female: Int}
  averageAge       Int?             @map("average_age") // Average age of venue goers
  placeId          String?          // Google Places ID
  businessStatus   String?
  popularTimes     Json?            // Google Popular Times data from SerpAPI
  popularTimesUpdated DateTime?     // When popular times were last fetched
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  busySnapshots    BusySnapshot[]
  posts            Post[]
  deals            Deal[]
  events           Event[]
  stories          Story[]
  venueImages      VenueImage[]

  @@map("venues")
}

model BusySnapshot {
  id                  String   @id @default(cuid())
  venueId             String
  timestamp           DateTime @default(now())
  occupancyCount      Int
  occupancyPercentage Int
  status              BusyStatus
  source              String   @default("realtime") // "realtime", "serp", "google", "estimated"

  venue Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@map("busy_snapshots")
  @@index([venueId, timestamp])
}

model Post {
  id        String   @id @default(cuid())
  venueId   String
  authorId  String
  content   String
  imageUrl  String?
  tags      String[]
  likes     Int      @default(0)
  comments  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  venue  Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)
  author User  @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Deal {
  id                  String   @id @default(cuid())
  venueId             String
  createdById         String
  title               String
  description         String
  discountPercentage  Int?
  validFrom           DateTime
  validUntil          DateTime
  termsAndConditions  String?
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  venue     Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)
  createdBy User  @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@map("deals")
}

model Event {
  id          String    @id @default(cuid())
  venueId     String
  createdById String
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  ticketPrice Float?
  capacity    Int?
  eventType   String
  imageUrl    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  venue     Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)
  createdBy User  @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@map("events")
}

model Story {
  id         String    @id @default(cuid())
  venueId    String
  authorId   String?   // Nullable for venue-posted stories
  mediaUrl   String
  mediaType  MediaType
  caption    String?
  views      Int       @default(0)
  expiresAt  DateTime
  createdAt  DateTime  @default(now())

  venue Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@map("stories")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  resourceId String?
  metadata  Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

model VenueImage {
  id           String         @id @default(cuid())
  venueId      String
  imageType    VenueImageType
  url          String
  thumbnailUrl String?
  altText      String?
  caption      String?
  uploadedBy   String?
  uploadedAt   DateTime       @default(now())
  isActive     Boolean        @default(true)
  displayOrder Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Image metadata
  width        Int?
  height       Int?
  fileSize     Int?
  format       String?
  colorPalette String[] // Array of hex color codes
  isPortrait   Boolean?
  aspectRatio  Float?

  venue Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@map("venue_images")
  @@index([venueId])
  @@index([imageType])
  @@index([isActive])
  @@index([venueId, imageType, isActive])
}

// Enums
enum Gender {
  MALE
  FEMALE
  NON_BINARY
  PREFER_NOT_TO_SAY
}

enum GoingOutFrequency {
  RARELY
  OCCASIONALLY
  REGULARLY
  FREQUENTLY
}

enum UserRole {
  USER
  VENUE_MANAGER
  ADMIN
}

enum BusyStatus {
  QUIET
  MODERATE
  BUSY
  VERY_BUSY
  CLOSED
}

enum MediaType {
  IMAGE
  VIDEO
}

enum VenueImageType {
  ICON
  BANNER
  GALLERY
  MENU
  INTERIOR
  EXTERIOR
  FOOD
  DRINKS
  ATMOSPHERE
  EVENTS
}

// MARK: - Friends & Messaging Models

model Friendship {
  id          String           @id @default(cuid())
  initiatorId String
  receiverId  String
  status      FriendshipStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  acceptedAt  DateTime?
  blockedAt   DateTime?

  // Location sharing
  isLocationSharingEnabled Boolean @default(false)
  lastSharedLocation       Json?   // {latitude, longitude, venueId, venueName, timestamp, accuracy}

  initiator User @relation("FriendshipInitiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiver  User @relation("FriendshipReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([initiatorId, receiverId])
  @@map("friendships")
  @@index([initiatorId])
  @@index([receiverId])
  @@index([status])
}

model Conversation {
  id        String   @id @default(cuid())
  type      ConversationType @default(DIRECT)
  name      String?  // For group chats
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime @default(now())
  lastReadAt     DateTime @default(now())
  leftAt         DateTime?
  isActive       Boolean  @default(true)

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
  @@index([userId])
  @@index([conversationId])
}

model Message {
  id             String      @id @default(cuid())
  conversationId String
  senderId       String
  recipientId    String?     // For direct messages

  // Encrypted content
  encryptedContent String    // AES-256 encrypted message content
  iv               String    // Initialization vector for AES
  authTag          String?   // Authentication tag for AES-GCM

  // Message metadata (not encrypted)
  messageType    MessageType @default(TEXT)
  venueId        String?     // For venue sharing messages
  mediaUrl       String?     // For media messages
  isEdited       Boolean     @default(false)
  isDeleted      Boolean     @default(false)

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  editedAt       DateTime?
  deletedAt      DateTime?

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  recipient    User?        @relation("MessageReceiver", fields: [recipientId], references: [id], onDelete: SetNull)
  readReceipts MessageReadReceipt[]

  @@map("messages")
  @@index([conversationId])
  @@index([senderId])
  @@index([recipientId])
  @@index([createdAt])
}

model MessageReadReceipt {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_read_receipts")
  @@index([messageId])
}

// Additional Enums
enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
  REJECTED
}

enum ConversationType {
  DIRECT
  GROUP
}

enum MessageType {
  TEXT
  VENUE_SHARE
  LOCATION_SHARE
  MEETUP_REQUEST
  IMAGE
  VIDEO
}