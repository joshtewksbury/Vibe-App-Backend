// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  firstName        String
  lastName         String
  passwordHash     String
  dateOfBirth      DateTime?
  gender           Gender    @default(PREFER_NOT_TO_SAY)
  profileImage     String?
  musicPreferences String[]
  venuePreferences String[]
  goingOutFrequency GoingOutFrequency @default(OCCASIONALLY)
  location         String?
  phoneNumber      String?
  isEmailVerified  Boolean   @default(false)
  role             UserRole  @default(USER)
  venueIds         String[]  // For venue managers
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastActiveAt     DateTime  @default(now())

  // Relations
  posts            Post[]
  deals            Deal[]
  events           Event[]
  refreshTokens    RefreshToken[]

  // Friendship relations
  friendshipsInitiated Friendship[] @relation("FriendshipInitiator")
  friendshipsReceived  Friendship[] @relation("FriendshipReceiver")

  // Messaging relations
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  conversationParticipants ConversationParticipant[]

  // Encryption keys for E2EE messaging
  publicKey        String?
  encryptedPrivateKey String?
  keyCreatedAt     DateTime?

  // Account Settings
  settings         UserSettings?
  deletionRequest  AccountDeletionRequest?

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Venue {
  id               String           @id @default(cuid())
  name             String
  category         String
  location         String
  latitude         Float
  longitude        Float
  capacity         Int
  currentOccupancy Int              @default(0)
  rating           Float?
  priceRange       String
  pricing          Json?            // Flexible pricing object
  musicGenres      Json[]           // Array of music genre objects
  openingHours     Json             // Opening hours object
  features         Json[]           // Array of feature objects
  bookingURL       String?
  phoneNumber      String?
  images           String[]
  venueIcon        String?          // Base64 venue icon (deprecated, use venueIconUrl)
  venueIconUrl     String?          // Cloudinary URL for venue icon
  genderSplit      Json?            @map("gender_split") // Gender demographics {male: Int, female: Int}
  averageAge       Int?             @map("average_age") // Average age of venue goers
  placeId          String?          // Google Places ID
  businessStatus   String?
  popularTimes     Json?            // Google Popular Times data from SerpAPI
  popularTimesUpdated DateTime?     // When popular times were last fetched
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  busySnapshots    BusySnapshot[]
  posts            Post[]
  deals            Deal[]
  events           Event[]
  stories          Story[]
  venueImages      VenueImage[]

  @@map("venues")
}

model BusySnapshot {
  id                  String   @id @default(cuid())
  venueId             String
  timestamp           DateTime @default(now())
  occupancyCount      Int
  occupancyPercentage Int
  status              BusyStatus
  source              String   @default("realtime") // "realtime", "serp", "google", "estimated"

  venue Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@map("busy_snapshots")
  @@index([venueId, timestamp])
}

model Post {
  id         String     @id @default(cuid())
  venueId    String?    // Optional - can be null for user posts
  authorId   String
  authorType AuthorType @default(USER)

  // Post content
  postType   PostType   @default(GENERAL)
  postStyle  PostStyle  @default(STANDARD)
  title      String
  content    String

  // Media
  mediaUrl   String?    // Cloudinary URL for images/videos
  mediaType  MediaType?
  imageLayout ImageLayoutType @default(FULL_WIDTH)

  // Event/Deal specific fields
  eventId    String?
  dealId     String?
  startTime  DateTime?
  endTime    DateTime?
  originalPrice String?
  discountPrice String?

  // Engagement
  likes      Int      @default(0)
  comments   Int      @default(0)
  views      Int      @default(0)

  // Flags
  isActive   Boolean  @default(true)
  isPinned   Boolean  @default(false)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  venue  Venue? @relation(fields: [venueId], references: [id], onDelete: Cascade)
  author User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  postLikes    PostLike[]
  postComments PostComment[]

  @@map("posts")
  @@index([venueId])
  @@index([authorId])
  @@index([postType])
  @@index([createdAt])
  @@index([isActive])
}

model Deal {
  id                  String   @id @default(cuid())
  venueId             String
  createdById         String
  title               String
  description         String
  discountPercentage  Int?
  validFrom           DateTime
  validUntil          DateTime
  termsAndConditions  String?
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  venue     Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)
  createdBy User  @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@map("deals")
}

model Event {
  id          String    @id @default(cuid())
  venueId     String
  createdById String?   // Optional for automated events (N8N scraper)
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  ticketPrice String?   // Changed to String to support "Free", "$20-50", etc.
  capacity    Int?
  eventType   String
  imageUrl    String?
  isActive    Boolean   @default(true)

  // External event integration
  source      EventSource @default(USER_CREATED) // Ticketmaster, Eventbrite, or user-created
  externalId  String?     // External API ID (e.g., "tm_123" or "eb_456")
  ticketURL   String?     // External ticket purchase URL
  artist      String?     // For music events
  genre       String?     // Music genre

  // Additional fields
  isRecurring Boolean   @default(false)
  recurringDays String[]  // e.g., ["MON", "WED", "FRI"]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  venue     Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)
  createdBy User? @relation(fields: [createdById], references: [id], onDelete: Cascade)

  rsvps     EventRSVP[]
  reminders EventReminder[]

  @@map("events")
  @@index([venueId])
  @@index([startTime])
  @@index([source])
}

model EventRSVP {
  id        String       @id @default(cuid())
  eventId   String
  userId    String
  status    RSVPStatus   @default(GOING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId]) // One RSVP per user per event
  @@map("event_rsvps")
  @@index([userId])
  @@index([eventId])
}

model EventReminder {
  id         String   @id @default(cuid())
  eventId    String
  userId     String
  reminderAt DateTime // When to send the reminder
  notified   Boolean  @default(false)
  createdAt  DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId]) // One reminder per user per event
  @@map("event_reminders")
  @@index([userId])
  @@index([reminderAt])
  @@index([notified])
}

model Story {
  id         String     @id @default(cuid())
  venueId    String?    // Optional - can be null for user stories
  authorId   String
  authorType AuthorType @default(USER)

  // Media
  mediaUrl   String     // Cloudinary URL
  mediaType  MediaType
  thumbnailUrl String?  // Thumbnail for videos

  // Content
  caption    String?
  location   String?

  // Engagement
  views      Int        @default(0)

  // Lifecycle
  expiresAt  DateTime   // Stories expire after 24 hours
  createdAt  DateTime   @default(now())
  isActive   Boolean    @default(true)

  venue      Venue?     @relation(fields: [venueId], references: [id], onDelete: Cascade)
  storyViews StoryView[]

  @@map("stories")
  @@index([venueId])
  @@index([authorId])
  @@index([expiresAt])
  @@index([createdAt])
  @@index([isActive])
}

model PostLike {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_likes")
  @@index([postId])
  @@index([userId])
}

model PostComment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("post_comments")
  @@index([postId])
  @@index([userId])
  @@index([createdAt])
}

model StoryView {
  id        String   @id @default(cuid())
  storyId   String
  userId    String?  // Nullable for anonymous views
  createdAt DateTime @default(now())

  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@map("story_views")
  @@index([storyId])
  @@index([userId])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  resourceId String?
  metadata  Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

model VenueImage {
  id           String         @id @default(cuid())
  venueId      String
  imageType    VenueImageType
  url          String
  thumbnailUrl String?
  altText      String?
  caption      String?
  uploadedBy   String?
  uploadedAt   DateTime       @default(now())
  isActive     Boolean        @default(true)
  displayOrder Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Image metadata
  width        Int?
  height       Int?
  fileSize     Int?
  format       String?
  colorPalette String[] // Array of hex color codes
  isPortrait   Boolean?
  aspectRatio  Float?

  venue Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@map("venue_images")
  @@index([venueId])
  @@index([imageType])
  @@index([isActive])
  @@index([venueId, imageType, isActive])
}

// Enums
enum Gender {
  MALE
  FEMALE
  NON_BINARY
  PREFER_NOT_TO_SAY
}

enum GoingOutFrequency {
  RARELY
  OCCASIONALLY
  REGULARLY
  FREQUENTLY
}

enum UserRole {
  USER
  VENUE_MANAGER
  ADMIN
}

enum BusyStatus {
  QUIET
  MODERATE
  BUSY
  VERY_BUSY
  CLOSED
}

enum MediaType {
  IMAGE
  VIDEO
}

enum VenueImageType {
  ICON
  BANNER
  GALLERY
  MENU
  INTERIOR
  EXTERIOR
  FOOD
  DRINKS
  ATMOSPHERE
  EVENTS
}

enum AuthorType {
  USER
  VENUE
}

enum PostType {
  EVENT
  DEAL
  SPORTS
  ANNOUNCEMENT
  REVIEW
  PHOTO
  GENERAL
}

enum PostStyle {
  BANNER      // Large banner with overlay text
  INFO        // Square image with text beside it
  STANDARD    // Standard feed post
}

enum ImageLayoutType {
  FULL_WIDTH
  HALF_WIDTH
  SQUARE
  BANNER
  INFO_SQUARE
}

// MARK: - Friends & Messaging Models

model Friendship {
  id          String           @id @default(cuid())
  initiatorId String
  receiverId  String
  status      FriendshipStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  acceptedAt  DateTime?
  blockedAt   DateTime?

  // Location sharing
  isLocationSharingEnabled Boolean @default(false)
  lastSharedLocation       Json?   // {latitude, longitude, venueId, venueName, timestamp, accuracy}

  initiator User @relation("FriendshipInitiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiver  User @relation("FriendshipReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([initiatorId, receiverId])
  @@map("friendships")
  @@index([initiatorId])
  @@index([receiverId])
  @@index([status])
}

model Conversation {
  id        String   @id @default(cuid())
  type      ConversationType @default(DIRECT)
  name      String?  // For group chats
  sharedEncryptionKey String? // Base64-encoded shared encryption key for E2EE
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime @default(now())
  lastReadAt     DateTime @default(now())
  leftAt         DateTime?
  isActive       Boolean  @default(true)

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
  @@index([userId])
  @@index([conversationId])
}

model Message {
  id             String      @id @default(cuid())
  conversationId String
  senderId       String
  recipientId    String?     // For direct messages

  // Encrypted content
  encryptedContent String    // AES-256 encrypted message content
  iv               String    // Initialization vector for AES
  authTag          String?   // Authentication tag for AES-GCM

  // Message metadata (not encrypted)
  messageType    MessageType @default(TEXT)
  venueId        String?     // For venue sharing messages
  mediaUrl       String?     // For media messages
  isEdited       Boolean     @default(false)
  isDeleted      Boolean     @default(false)

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  editedAt       DateTime?
  deletedAt      DateTime?

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  recipient    User?        @relation("MessageReceiver", fields: [recipientId], references: [id], onDelete: SetNull)
  readReceipts MessageReadReceipt[]

  @@map("messages")
  @@index([conversationId])
  @@index([senderId])
  @@index([recipientId])
  @@index([createdAt])
}

model MessageReadReceipt {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_read_receipts")
  @@index([messageId])
}

// Additional Enums
enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
  REJECTED
}

enum ConversationType {
  DIRECT
  GROUP
}

enum MessageType {
  TEXT
  VENUE_SHARE
  LOCATION_SHARE
  MEETUP_REQUEST
  IMAGE
  VIDEO
}

// Heat map tile caching for fast performance
model HeatMapTile {
  id         String   @id @default(cuid())
  z          Int      // Zoom level
  x          Int      // Tile X coordinate
  y          Int      // Tile Y coordinate
  tileData   Bytes    // PNG tile data
  venueHash  String   // Hash of venue occupancy data used to generate tile
  createdAt  DateTime @default(now())
  expiresAt  DateTime // When this tile expires
  hitCount   Int      @default(0) // Track tile popularity
  lastHitAt  DateTime @default(now())

  @@unique([z, x, y])
  @@map("heatmap_tiles")
  @@index([z])
  @@index([expiresAt])
  @@index([venueHash])
}

// User Settings & Privacy Models
model UserSettings {
  id     String @id @default(cuid())
  userId String @unique

  // Notification Preferences
  pushNotificationsEnabled Boolean @default(true)
  emailNotificationsEnabled Boolean @default(true)

  // Notification Types
  notifyOnNewMessage       Boolean @default(true)
  notifyOnFriendRequest    Boolean @default(true)
  notifyOnPostLike         Boolean @default(true)
  notifyOnPostComment      Boolean @default(true)
  notifyOnEventReminder    Boolean @default(true)
  notifyOnNearbyFriends    Boolean @default(true)
  notifyOnVenueDeals       Boolean @default(false)

  // Privacy Settings
  profileVisibility        ProfileVisibility @default(PUBLIC)
  locationSharingEnabled   Boolean @default(false)
  showOnlineStatus         Boolean @default(true)
  allowFriendRequests      Boolean @default(true)
  allowMessageRequests     Boolean @default(true)

  // App Preferences
  darkModeEnabled          Boolean @default(false)
  language                 String @default("en")
  distanceUnit             DistanceUnit @default(KILOMETERS)

  // Data & Storage
  autoDownloadMedia        Boolean @default(true)
  saveStoriesAutomatically Boolean @default(false)

  // Legal & Compliance
  termsAcceptedAt          DateTime?
  termsAcceptedVersion     String?
  privacyPolicyAcceptedAt  DateTime?
  privacyPolicyAcceptedVersion String?
  marketingEmailsConsent   Boolean @default(false)
  dataCollectionConsent    Boolean @default(true)
  ageVerified              Boolean @default(false)
  ageVerifiedAt            DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
  @@index([userId])
}

model BlockedUser {
  id          String   @id @default(cuid())
  userId      String   // User who blocked
  blockedUserId String // User who was blocked
  reason      String?  // Optional reason for blocking
  blockedAt   DateTime @default(now())

  @@unique([userId, blockedUserId])
  @@map("blocked_users")
  @@index([userId])
  @@index([blockedUserId])
}

model AccountDeletionRequest {
  id             String              @id @default(cuid())
  userId         String              @unique
  requestedAt    DateTime            @default(now())
  scheduledFor   DateTime            // When account will be deleted (30 days from request)
  status         DeletionStatus      @default(PENDING)
  reason         String?             // Optional reason for deletion
  cancelledAt    DateTime?
  completedAt    DateTime?
  dataExported   Boolean             @default(false)
  dataExportedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account_deletion_requests")
  @@index([userId])
  @@index([scheduledFor])
  @@index([status])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model LoginHistory {
  id         String   @id @default(cuid())
  userId     String
  ipAddress  String
  userAgent  String
  location   String?  // City, Country from IP
  deviceType String?  // iOS, Android, Web
  success    Boolean
  failReason String?  // If login failed, reason
  createdAt  DateTime @default(now())

  @@map("login_history")
  @@index([userId])
  @@index([createdAt])
  @@index([success])
}

// Additional Enums for Settings
enum ProfileVisibility {
  PUBLIC       // Anyone can see profile
  FRIENDS_ONLY // Only friends can see profile
  PRIVATE      // Only user can see profile
}

enum DistanceUnit {
  KILOMETERS
  MILES
}

enum DeletionStatus {
  PENDING      // Deletion requested, waiting for grace period
  CANCELLED    // User cancelled deletion
  COMPLETED    // Account deleted
}

enum EventSource {
  USER_CREATED  // Event created by venue or user
  TICKETMASTER  // Synced from Ticketmaster API
  EVENTBRITE    // Synced from Eventbrite API
  VENUE_WEBSITE // Scraped from venue website via N8N
}

enum RSVPStatus {
  GOING         // User confirmed attending
  INTERESTED    // User marked as interested
  NOT_GOING     // User declined
}